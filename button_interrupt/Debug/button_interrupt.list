
button_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ef4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800307c  0800307c  0001307c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030c4  080030c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080030c4  080030c4  000130c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030cc  080030cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030d0  080030d0  000130d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  080030e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080030e0  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a14a  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001724  00000000  00000000  0002a1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000898  00000000  00000000  0002b8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000695  00000000  00000000  0002c188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c17  00000000  00000000  0002c81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a61e  00000000  00000000  00051434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3a9b  00000000  00000000  0005ba52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002240  00000000  00000000  0013f4f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00141730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003064 	.word	0x08003064

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003064 	.word	0x08003064

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fa0e 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f814 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f894 	bl	80005fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f862 	bl	800059c <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8) == 1){
 80004d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004dc:	4805      	ldr	r0, [pc, #20]	; (80004f4 <main+0x30>)
 80004de:	f000 fd0f 	bl	8000f00 <HAL_GPIO_ReadPin>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d1f7      	bne.n	80004d8 <main+0x14>
		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_9);
 80004e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ec:	4801      	ldr	r0, [pc, #4]	; (80004f4 <main+0x30>)
 80004ee:	f000 fd37 	bl	8000f60 <HAL_GPIO_TogglePin>
	  if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8) == 1){
 80004f2:	e7f1      	b.n	80004d8 <main+0x14>
 80004f4:	48000400 	.word	0x48000400

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b096      	sub	sp, #88	; 0x58
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	2244      	movs	r2, #68	; 0x44
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f002 fd7f 	bl	800300a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	463b      	mov	r3, r7
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800051a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800051e:	f000 fd47 	bl	8000fb0 <HAL_PWREx_ControlVoltageScaling>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000528:	f000 f8f2 	bl	8000710 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052c:	2302      	movs	r3, #2
 800052e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000534:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000536:	2310      	movs	r3, #16
 8000538:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053a:	2302      	movs	r3, #2
 800053c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800053e:	2302      	movs	r3, #2
 8000540:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000542:	2301      	movs	r3, #1
 8000544:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000546:	230a      	movs	r3, #10
 8000548:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800054a:	2307      	movs	r3, #7
 800054c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800054e:	2302      	movs	r3, #2
 8000550:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000552:	2302      	movs	r3, #2
 8000554:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fd7e 	bl	800105c <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000566:	f000 f8d3 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056a:	230f      	movs	r3, #15
 800056c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056e:	2303      	movs	r3, #3
 8000570:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	2104      	movs	r1, #4
 8000582:	4618      	mov	r0, r3
 8000584:	f001 f946 	bl	8001814 <HAL_RCC_ClockConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800058e:	f000 f8bf 	bl	8000710 <Error_Handler>
  }
}
 8000592:	bf00      	nop
 8000594:	3758      	adds	r7, #88	; 0x58
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005a2:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <MX_USART2_UART_Init+0x5c>)
 80005a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005c2:	220c      	movs	r2, #12
 80005c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005e0:	f001 fff8 	bl	80025d4 <HAL_UART_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005ea:	f000 f891 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000028 	.word	0x20000028
 80005f8:	40004400 	.word	0x40004400

080005fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	; 0x28
 8000600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	4b3c      	ldr	r3, [pc, #240]	; (8000704 <MX_GPIO_Init+0x108>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a3b      	ldr	r2, [pc, #236]	; (8000704 <MX_GPIO_Init+0x108>)
 8000618:	f043 0304 	orr.w	r3, r3, #4
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b39      	ldr	r3, [pc, #228]	; (8000704 <MX_GPIO_Init+0x108>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0304 	and.w	r3, r3, #4
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062a:	4b36      	ldr	r3, [pc, #216]	; (8000704 <MX_GPIO_Init+0x108>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	4a35      	ldr	r2, [pc, #212]	; (8000704 <MX_GPIO_Init+0x108>)
 8000630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000636:	4b33      	ldr	r3, [pc, #204]	; (8000704 <MX_GPIO_Init+0x108>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b30      	ldr	r3, [pc, #192]	; (8000704 <MX_GPIO_Init+0x108>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	4a2f      	ldr	r2, [pc, #188]	; (8000704 <MX_GPIO_Init+0x108>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064e:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <MX_GPIO_Init+0x108>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <MX_GPIO_Init+0x108>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a29      	ldr	r2, [pc, #164]	; (8000704 <MX_GPIO_Init+0x108>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b27      	ldr	r3, [pc, #156]	; (8000704 <MX_GPIO_Init+0x108>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2120      	movs	r1, #32
 8000676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067a:	f000 fc59 	bl	8000f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000684:	4820      	ldr	r0, [pc, #128]	; (8000708 <MX_GPIO_Init+0x10c>)
 8000686:	f000 fc53 	bl	8000f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800068a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000690:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	481a      	ldr	r0, [pc, #104]	; (800070c <MX_GPIO_Init+0x110>)
 80006a2:	f000 fa83 	bl	8000bac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006a6:	2320      	movs	r3, #32
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c0:	f000 fa74 	bl	8000bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006ce:	2302      	movs	r3, #2
 80006d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	480b      	ldr	r0, [pc, #44]	; (8000708 <MX_GPIO_Init+0x10c>)
 80006da:	f000 fa67 	bl	8000bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_GPIO_Init+0x10c>)
 80006f8:	f000 fa58 	bl	8000bac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	; 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021000 	.word	0x40021000
 8000708:	48000400 	.word	0x48000400
 800070c:	48000800 	.word	0x48000800

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	e7fe      	b.n	8000718 <Error_Handler+0x8>
	...

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <HAL_MspInit+0x44>)
 8000724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <HAL_MspInit+0x44>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6613      	str	r3, [r2, #96]	; 0x60
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <HAL_MspInit+0x44>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_MspInit+0x44>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073e:	4a08      	ldr	r2, [pc, #32]	; (8000760 <HAL_MspInit+0x44>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	6593      	str	r3, [r2, #88]	; 0x58
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_MspInit+0x44>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000

08000764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b0ac      	sub	sp, #176	; 0xb0
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	2288      	movs	r2, #136	; 0x88
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f002 fc40 	bl	800300a <memset>
  if(huart->Instance==USART2)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a21      	ldr	r2, [pc, #132]	; (8000814 <HAL_UART_MspInit+0xb0>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d13b      	bne.n	800080c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000794:	2302      	movs	r3, #2
 8000796:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000798:	2300      	movs	r3, #0
 800079a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fa5b 	bl	8001c5c <HAL_RCCEx_PeriphCLKConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007ac:	f7ff ffb0 	bl	8000710 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <HAL_UART_MspInit+0xb4>)
 80007b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b4:	4a18      	ldr	r2, [pc, #96]	; (8000818 <HAL_UART_MspInit+0xb4>)
 80007b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ba:	6593      	str	r3, [r2, #88]	; 0x58
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <HAL_UART_MspInit+0xb4>)
 80007be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <HAL_UART_MspInit+0xb4>)
 80007ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007cc:	4a12      	ldr	r2, [pc, #72]	; (8000818 <HAL_UART_MspInit+0xb4>)
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <HAL_UART_MspInit+0xb4>)
 80007d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007e0:	230c      	movs	r3, #12
 80007e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007f8:	2307      	movs	r3, #7
 80007fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000802:	4619      	mov	r1, r3
 8000804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000808:	f000 f9d0 	bl	8000bac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800080c:	bf00      	nop
 800080e:	37b0      	adds	r7, #176	; 0xb0
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40004400 	.word	0x40004400
 8000818:	40021000 	.word	0x40021000

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <NMI_Handler+0x4>

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 f89a 	bl	80009a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <SystemInit+0x20>)
 8000876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <SystemInit+0x20>)
 800087c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000898:	f7ff ffea 	bl	8000870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800089e:	490d      	ldr	r1, [pc, #52]	; (80008d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a0:	4a0d      	ldr	r2, [pc, #52]	; (80008d8 <LoopForever+0xe>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b4:	4c0a      	ldr	r4, [pc, #40]	; (80008e0 <LoopForever+0x16>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c2:	f002 fbab 	bl	800301c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008c6:	f7ff fdfd 	bl	80004c4 <main>

080008ca <LoopForever>:

LoopForever:
    b LoopForever
 80008ca:	e7fe      	b.n	80008ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008d8:	080030d4 	.word	0x080030d4
  ldr r2, =_sbss
 80008dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008e0:	200000b4 	.word	0x200000b4

080008e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC1_2_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_Init+0x3c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <HAL_Init+0x3c>)
 80008f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fe:	2003      	movs	r0, #3
 8000900:	f000 f920 	bl	8000b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000904:	2000      	movs	r0, #0
 8000906:	f000 f80f 	bl	8000928 <HAL_InitTick>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d002      	beq.n	8000916 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000910:	2301      	movs	r3, #1
 8000912:	71fb      	strb	r3, [r7, #7]
 8000914:	e001      	b.n	800091a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000916:	f7ff ff01 	bl	800071c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800091a:	79fb      	ldrb	r3, [r7, #7]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40022000 	.word	0x40022000

08000928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000930:	2300      	movs	r3, #0
 8000932:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <HAL_InitTick+0x6c>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d023      	beq.n	8000984 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <HAL_InitTick+0x70>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <HAL_InitTick+0x6c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	fbb3 f3f1 	udiv	r3, r3, r1
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f91d 	bl	8000b92 <HAL_SYSTICK_Config>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10f      	bne.n	800097e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b0f      	cmp	r3, #15
 8000962:	d809      	bhi.n	8000978 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000964:	2200      	movs	r2, #0
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	f000 f8f5 	bl	8000b5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <HAL_InitTick+0x74>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6013      	str	r3, [r2, #0]
 8000976:	e007      	b.n	8000988 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000978:	2301      	movs	r3, #1
 800097a:	73fb      	strb	r3, [r7, #15]
 800097c:	e004      	b.n	8000988 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	73fb      	strb	r3, [r7, #15]
 8000982:	e001      	b.n	8000988 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000984:	2301      	movs	r3, #1
 8000986:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000988:	7bfb      	ldrb	r3, [r7, #15]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008
 8000998:	20000000 	.word	0x20000000
 800099c:	20000004 	.word	0x20000004

080009a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x20>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_IncTick+0x24>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <HAL_IncTick+0x24>)
 80009b2:	6013      	str	r3, [r2, #0]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000008 	.word	0x20000008
 80009c4:	200000b0 	.word	0x200000b0

080009c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <HAL_GetTick+0x14>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	200000b0 	.word	0x200000b0

080009e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009fc:	4013      	ands	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	60d3      	str	r3, [r2, #12]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <__NVIC_GetPriorityGrouping+0x18>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	f003 0307 	and.w	r3, r3, #7
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	db0a      	blt.n	8000a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	490c      	ldr	r1, [pc, #48]	; (8000a90 <__NVIC_SetPriority+0x4c>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	0112      	lsls	r2, r2, #4
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	440b      	add	r3, r1
 8000a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a6c:	e00a      	b.n	8000a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4908      	ldr	r1, [pc, #32]	; (8000a94 <__NVIC_SetPriority+0x50>)
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	0112      	lsls	r2, r2, #4
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	440b      	add	r3, r1
 8000a82:	761a      	strb	r2, [r3, #24]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000e100 	.word	0xe000e100
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	f1c3 0307 	rsb	r3, r3, #7
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	bf28      	it	cs
 8000ab6:	2304      	movcs	r3, #4
 8000ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3304      	adds	r3, #4
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d902      	bls.n	8000ac8 <NVIC_EncodePriority+0x30>
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3b03      	subs	r3, #3
 8000ac6:	e000      	b.n	8000aca <NVIC_EncodePriority+0x32>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	401a      	ands	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aea:	43d9      	mvns	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	4313      	orrs	r3, r2
         );
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3724      	adds	r7, #36	; 0x24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b10:	d301      	bcc.n	8000b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00f      	b.n	8000b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <SysTick_Config+0x40>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1e:	210f      	movs	r1, #15
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f7ff ff8e 	bl	8000a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <SysTick_Config+0x40>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SysTick_Config+0x40>)
 8000b30:	2207      	movs	r2, #7
 8000b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff47 	bl	80009e0 <__NVIC_SetPriorityGrouping>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b6c:	f7ff ff5c 	bl	8000a28 <__NVIC_GetPriorityGrouping>
 8000b70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	68b9      	ldr	r1, [r7, #8]
 8000b76:	6978      	ldr	r0, [r7, #20]
 8000b78:	f7ff ff8e 	bl	8000a98 <NVIC_EncodePriority>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff5d 	bl	8000a44 <__NVIC_SetPriority>
}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ffb0 	bl	8000b00 <SysTick_Config>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b087      	sub	sp, #28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bba:	e17f      	b.n	8000ebc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 8171 	beq.w	8000eb6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f003 0303 	and.w	r3, r3, #3
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d005      	beq.n	8000bec <HAL_GPIO_Init+0x40>
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 0303 	and.w	r3, r3, #3
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d130      	bne.n	8000c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	68da      	ldr	r2, [r3, #12]
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c22:	2201      	movs	r2, #1
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	091b      	lsrs	r3, r3, #4
 8000c38:	f003 0201 	and.w	r2, r3, #1
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d118      	bne.n	8000c8c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c60:	2201      	movs	r2, #1
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	08db      	lsrs	r3, r3, #3
 8000c76:	f003 0201 	and.w	r2, r3, #1
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d017      	beq.n	8000cc8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d123      	bne.n	8000d1c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	08da      	lsrs	r2, r3, #3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3208      	adds	r2, #8
 8000cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	f003 0307 	and.w	r3, r3, #7
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	220f      	movs	r2, #15
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	691a      	ldr	r2, [r3, #16]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	08da      	lsrs	r2, r3, #3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3208      	adds	r2, #8
 8000d16:	6939      	ldr	r1, [r7, #16]
 8000d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2203      	movs	r2, #3
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 0203 	and.w	r2, r3, #3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 80ac 	beq.w	8000eb6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	4b5f      	ldr	r3, [pc, #380]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d62:	4a5e      	ldr	r2, [pc, #376]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6613      	str	r3, [r2, #96]	; 0x60
 8000d6a:	4b5c      	ldr	r3, [pc, #368]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d76:	4a5a      	ldr	r2, [pc, #360]	; (8000ee0 <HAL_GPIO_Init+0x334>)
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	089b      	lsrs	r3, r3, #2
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000da0:	d025      	beq.n	8000dee <HAL_GPIO_Init+0x242>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4f      	ldr	r2, [pc, #316]	; (8000ee4 <HAL_GPIO_Init+0x338>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d01f      	beq.n	8000dea <HAL_GPIO_Init+0x23e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4e      	ldr	r2, [pc, #312]	; (8000ee8 <HAL_GPIO_Init+0x33c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d019      	beq.n	8000de6 <HAL_GPIO_Init+0x23a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a4d      	ldr	r2, [pc, #308]	; (8000eec <HAL_GPIO_Init+0x340>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d013      	beq.n	8000de2 <HAL_GPIO_Init+0x236>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4c      	ldr	r2, [pc, #304]	; (8000ef0 <HAL_GPIO_Init+0x344>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d00d      	beq.n	8000dde <HAL_GPIO_Init+0x232>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4b      	ldr	r2, [pc, #300]	; (8000ef4 <HAL_GPIO_Init+0x348>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d007      	beq.n	8000dda <HAL_GPIO_Init+0x22e>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a4a      	ldr	r2, [pc, #296]	; (8000ef8 <HAL_GPIO_Init+0x34c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d101      	bne.n	8000dd6 <HAL_GPIO_Init+0x22a>
 8000dd2:	2306      	movs	r3, #6
 8000dd4:	e00c      	b.n	8000df0 <HAL_GPIO_Init+0x244>
 8000dd6:	2307      	movs	r3, #7
 8000dd8:	e00a      	b.n	8000df0 <HAL_GPIO_Init+0x244>
 8000dda:	2305      	movs	r3, #5
 8000ddc:	e008      	b.n	8000df0 <HAL_GPIO_Init+0x244>
 8000dde:	2304      	movs	r3, #4
 8000de0:	e006      	b.n	8000df0 <HAL_GPIO_Init+0x244>
 8000de2:	2303      	movs	r3, #3
 8000de4:	e004      	b.n	8000df0 <HAL_GPIO_Init+0x244>
 8000de6:	2302      	movs	r3, #2
 8000de8:	e002      	b.n	8000df0 <HAL_GPIO_Init+0x244>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <HAL_GPIO_Init+0x244>
 8000dee:	2300      	movs	r3, #0
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	f002 0203 	and.w	r2, r2, #3
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	4093      	lsls	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e00:	4937      	ldr	r1, [pc, #220]	; (8000ee0 <HAL_GPIO_Init+0x334>)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e0e:	4b3b      	ldr	r3, [pc, #236]	; (8000efc <HAL_GPIO_Init+0x350>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e32:	4a32      	ldr	r2, [pc, #200]	; (8000efc <HAL_GPIO_Init+0x350>)
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e38:	4b30      	ldr	r3, [pc, #192]	; (8000efc <HAL_GPIO_Init+0x350>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e5c:	4a27      	ldr	r2, [pc, #156]	; (8000efc <HAL_GPIO_Init+0x350>)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e62:	4b26      	ldr	r3, [pc, #152]	; (8000efc <HAL_GPIO_Init+0x350>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e86:	4a1d      	ldr	r2, [pc, #116]	; (8000efc <HAL_GPIO_Init+0x350>)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_GPIO_Init+0x350>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000eb0:	4a12      	ldr	r2, [pc, #72]	; (8000efc <HAL_GPIO_Init+0x350>)
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f47f ae78 	bne.w	8000bbc <HAL_GPIO_Init+0x10>
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	371c      	adds	r7, #28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010000 	.word	0x40010000
 8000ee4:	48000400 	.word	0x48000400
 8000ee8:	48000800 	.word	0x48000800
 8000eec:	48000c00 	.word	0x48000c00
 8000ef0:	48001000 	.word	0x48001000
 8000ef4:	48001400 	.word	0x48001400
 8000ef8:	48001800 	.word	0x48001800
 8000efc:	40010400 	.word	0x40010400

08000f00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	691a      	ldr	r2, [r3, #16]
 8000f10:	887b      	ldrh	r3, [r7, #2]
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e001      	b.n	8000f22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	807b      	strh	r3, [r7, #2]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f40:	787b      	ldrb	r3, [r7, #1]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f46:	887a      	ldrh	r2, [r7, #2]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f4c:	e002      	b.n	8000f54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	695b      	ldr	r3, [r3, #20]
 8000f70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4013      	ands	r3, r2
 8000f78:	041a      	lsls	r2, r3, #16
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	43d9      	mvns	r1, r3
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	400b      	ands	r3, r1
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	619a      	str	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <HAL_PWREx_GetVoltageRange+0x18>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40007000 	.word	0x40007000

08000fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fbe:	d130      	bne.n	8001022 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fc0:	4b23      	ldr	r3, [pc, #140]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fcc:	d038      	beq.n	8001040 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fdc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2232      	movs	r2, #50	; 0x32
 8000fe4:	fb02 f303 	mul.w	r3, r2, r3
 8000fe8:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fea:	fba2 2303 	umull	r2, r3, r2, r3
 8000fee:	0c9b      	lsrs	r3, r3, #18
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ff4:	e002      	b.n	8000ffc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001008:	d102      	bne.n	8001010 <HAL_PWREx_ControlVoltageScaling+0x60>
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f2      	bne.n	8000ff6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800101c:	d110      	bne.n	8001040 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e00f      	b.n	8001042 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800102a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800102e:	d007      	beq.n	8001040 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001038:	4a05      	ldr	r2, [pc, #20]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800103a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800103e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40007000 	.word	0x40007000
 8001054:	20000000 	.word	0x20000000
 8001058:	431bde83 	.word	0x431bde83

0800105c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e3ca      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800106e:	4b97      	ldr	r3, [pc, #604]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 030c 	and.w	r3, r3, #12
 8001076:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001078:	4b94      	ldr	r3, [pc, #592]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 80e4 	beq.w	8001258 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d007      	beq.n	80010a6 <HAL_RCC_OscConfig+0x4a>
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	2b0c      	cmp	r3, #12
 800109a:	f040 808b 	bne.w	80011b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	f040 8087 	bne.w	80011b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010a6:	4b89      	ldr	r3, [pc, #548]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d005      	beq.n	80010be <HAL_RCC_OscConfig+0x62>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e3a2      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a1a      	ldr	r2, [r3, #32]
 80010c2:	4b82      	ldr	r3, [pc, #520]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d004      	beq.n	80010d8 <HAL_RCC_OscConfig+0x7c>
 80010ce:	4b7f      	ldr	r3, [pc, #508]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010d6:	e005      	b.n	80010e4 <HAL_RCC_OscConfig+0x88>
 80010d8:	4b7c      	ldr	r3, [pc, #496]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 80010da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010de:	091b      	lsrs	r3, r3, #4
 80010e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d223      	bcs.n	8001130 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fd55 	bl	8001b9c <RCC_SetFlashLatencyFromMSIRange>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e383      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010fc:	4b73      	ldr	r3, [pc, #460]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a72      	ldr	r2, [pc, #456]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 8001102:	f043 0308 	orr.w	r3, r3, #8
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b70      	ldr	r3, [pc, #448]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	496d      	ldr	r1, [pc, #436]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 8001116:	4313      	orrs	r3, r2
 8001118:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800111a:	4b6c      	ldr	r3, [pc, #432]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	4968      	ldr	r1, [pc, #416]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 800112a:	4313      	orrs	r3, r2
 800112c:	604b      	str	r3, [r1, #4]
 800112e:	e025      	b.n	800117c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001130:	4b66      	ldr	r3, [pc, #408]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a65      	ldr	r2, [pc, #404]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 8001136:	f043 0308 	orr.w	r3, r3, #8
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b63      	ldr	r3, [pc, #396]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	4960      	ldr	r1, [pc, #384]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 800114a:	4313      	orrs	r3, r2
 800114c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800114e:	4b5f      	ldr	r3, [pc, #380]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	495b      	ldr	r1, [pc, #364]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 800115e:	4313      	orrs	r3, r2
 8001160:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d109      	bne.n	800117c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a1b      	ldr	r3, [r3, #32]
 800116c:	4618      	mov	r0, r3
 800116e:	f000 fd15 	bl	8001b9c <RCC_SetFlashLatencyFromMSIRange>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e343      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800117c:	f000 fc4a 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 8001180:	4602      	mov	r2, r0
 8001182:	4b52      	ldr	r3, [pc, #328]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	091b      	lsrs	r3, r3, #4
 8001188:	f003 030f 	and.w	r3, r3, #15
 800118c:	4950      	ldr	r1, [pc, #320]	; (80012d0 <HAL_RCC_OscConfig+0x274>)
 800118e:	5ccb      	ldrb	r3, [r1, r3]
 8001190:	f003 031f 	and.w	r3, r3, #31
 8001194:	fa22 f303 	lsr.w	r3, r2, r3
 8001198:	4a4e      	ldr	r2, [pc, #312]	; (80012d4 <HAL_RCC_OscConfig+0x278>)
 800119a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800119c:	4b4e      	ldr	r3, [pc, #312]	; (80012d8 <HAL_RCC_OscConfig+0x27c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fbc1 	bl	8000928 <HAL_InitTick>
 80011a6:	4603      	mov	r3, r0
 80011a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d052      	beq.n	8001256 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	e327      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d032      	beq.n	8001222 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011bc:	4b43      	ldr	r3, [pc, #268]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a42      	ldr	r2, [pc, #264]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fbfe 	bl	80009c8 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011d0:	f7ff fbfa 	bl	80009c8 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e310      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011e2:	4b3a      	ldr	r3, [pc, #232]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f0      	beq.n	80011d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ee:	4b37      	ldr	r3, [pc, #220]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a36      	ldr	r2, [pc, #216]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 80011f4:	f043 0308 	orr.w	r3, r3, #8
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b34      	ldr	r3, [pc, #208]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	4931      	ldr	r1, [pc, #196]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 8001208:	4313      	orrs	r3, r2
 800120a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	492c      	ldr	r1, [pc, #176]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 800121c:	4313      	orrs	r3, r2
 800121e:	604b      	str	r3, [r1, #4]
 8001220:	e01a      	b.n	8001258 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a29      	ldr	r2, [pc, #164]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 8001228:	f023 0301 	bic.w	r3, r3, #1
 800122c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800122e:	f7ff fbcb 	bl	80009c8 <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001236:	f7ff fbc7 	bl	80009c8 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e2dd      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001248:	4b20      	ldr	r3, [pc, #128]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f0      	bne.n	8001236 <HAL_RCC_OscConfig+0x1da>
 8001254:	e000      	b.n	8001258 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001256:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d074      	beq.n	800134e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2b08      	cmp	r3, #8
 8001268:	d005      	beq.n	8001276 <HAL_RCC_OscConfig+0x21a>
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b0c      	cmp	r3, #12
 800126e:	d10e      	bne.n	800128e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	2b03      	cmp	r3, #3
 8001274:	d10b      	bne.n	800128e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d064      	beq.n	800134c <HAL_RCC_OscConfig+0x2f0>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d160      	bne.n	800134c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e2ba      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001296:	d106      	bne.n	80012a6 <HAL_RCC_OscConfig+0x24a>
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 800129e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	e026      	b.n	80012f4 <HAL_RCC_OscConfig+0x298>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ae:	d115      	bne.n	80012dc <HAL_RCC_OscConfig+0x280>
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a05      	ldr	r2, [pc, #20]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 80012b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a02      	ldr	r2, [pc, #8]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 80012c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	e014      	b.n	80012f4 <HAL_RCC_OscConfig+0x298>
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000
 80012d0:	0800307c 	.word	0x0800307c
 80012d4:	20000000 	.word	0x20000000
 80012d8:	20000004 	.word	0x20000004
 80012dc:	4ba0      	ldr	r3, [pc, #640]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a9f      	ldr	r2, [pc, #636]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 80012e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b9d      	ldr	r3, [pc, #628]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a9c      	ldr	r2, [pc, #624]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 80012ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d013      	beq.n	8001324 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff fb64 	bl	80009c8 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fb60 	bl	80009c8 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e276      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001316:	4b92      	ldr	r3, [pc, #584]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0x2a8>
 8001322:	e014      	b.n	800134e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001324:	f7ff fb50 	bl	80009c8 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fb4c 	bl	80009c8 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	; 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e262      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800133e:	4b88      	ldr	r3, [pc, #544]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0x2d0>
 800134a:	e000      	b.n	800134e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d060      	beq.n	800141c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	2b04      	cmp	r3, #4
 800135e:	d005      	beq.n	800136c <HAL_RCC_OscConfig+0x310>
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2b0c      	cmp	r3, #12
 8001364:	d119      	bne.n	800139a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d116      	bne.n	800139a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800136c:	4b7c      	ldr	r3, [pc, #496]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_RCC_OscConfig+0x328>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e23f      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001384:	4b76      	ldr	r3, [pc, #472]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	061b      	lsls	r3, r3, #24
 8001392:	4973      	ldr	r1, [pc, #460]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001398:	e040      	b.n	800141c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d023      	beq.n	80013ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a2:	4b6f      	ldr	r3, [pc, #444]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a6e      	ldr	r2, [pc, #440]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 80013a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff fb0b 	bl	80009c8 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fb07 	bl	80009c8 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e21d      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013c8:	4b65      	ldr	r3, [pc, #404]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b62      	ldr	r3, [pc, #392]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	061b      	lsls	r3, r3, #24
 80013e2:	495f      	ldr	r1, [pc, #380]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
 80013e8:	e018      	b.n	800141c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	4b5d      	ldr	r3, [pc, #372]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a5c      	ldr	r2, [pc, #368]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 80013f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f6:	f7ff fae7 	bl	80009c8 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013fe:	f7ff fae3 	bl	80009c8 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e1f9      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001410:	4b53      	ldr	r3, [pc, #332]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f0      	bne.n	80013fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	d03c      	beq.n	80014a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d01c      	beq.n	800146a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001430:	4b4b      	ldr	r3, [pc, #300]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 8001432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001436:	4a4a      	ldr	r2, [pc, #296]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001440:	f7ff fac2 	bl	80009c8 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001448:	f7ff fabe 	bl	80009c8 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e1d4      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800145a:	4b41      	ldr	r3, [pc, #260]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 800145c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0ef      	beq.n	8001448 <HAL_RCC_OscConfig+0x3ec>
 8001468:	e01b      	b.n	80014a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800146a:	4b3d      	ldr	r3, [pc, #244]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 800146c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001470:	4a3b      	ldr	r2, [pc, #236]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 8001472:	f023 0301 	bic.w	r3, r3, #1
 8001476:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147a:	f7ff faa5 	bl	80009c8 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001482:	f7ff faa1 	bl	80009c8 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e1b7      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001494:	4b32      	ldr	r3, [pc, #200]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 8001496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1ef      	bne.n	8001482 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 80a6 	beq.w	80015fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b0:	2300      	movs	r3, #0
 80014b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014b4:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 80014b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d10d      	bne.n	80014dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c0:	4b27      	ldr	r3, [pc, #156]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 80014c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c4:	4a26      	ldr	r2, [pc, #152]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 80014c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ca:	6593      	str	r3, [r2, #88]	; 0x58
 80014cc:	4b24      	ldr	r3, [pc, #144]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 80014ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d8:	2301      	movs	r3, #1
 80014da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014dc:	4b21      	ldr	r3, [pc, #132]	; (8001564 <HAL_RCC_OscConfig+0x508>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d118      	bne.n	800151a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014e8:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <HAL_RCC_OscConfig+0x508>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a1d      	ldr	r2, [pc, #116]	; (8001564 <HAL_RCC_OscConfig+0x508>)
 80014ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f4:	f7ff fa68 	bl	80009c8 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fc:	f7ff fa64 	bl	80009c8 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e17a      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_RCC_OscConfig+0x508>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d108      	bne.n	8001534 <HAL_RCC_OscConfig+0x4d8>
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 8001524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001528:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001532:	e029      	b.n	8001588 <HAL_RCC_OscConfig+0x52c>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b05      	cmp	r3, #5
 800153a:	d115      	bne.n	8001568 <HAL_RCC_OscConfig+0x50c>
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 800153e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001542:	4a07      	ldr	r2, [pc, #28]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 800154e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001552:	4a03      	ldr	r2, [pc, #12]	; (8001560 <HAL_RCC_OscConfig+0x504>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800155c:	e014      	b.n	8001588 <HAL_RCC_OscConfig+0x52c>
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000
 8001564:	40007000 	.word	0x40007000
 8001568:	4b9c      	ldr	r3, [pc, #624]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 800156a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800156e:	4a9b      	ldr	r2, [pc, #620]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001578:	4b98      	ldr	r3, [pc, #608]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 800157a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800157e:	4a97      	ldr	r2, [pc, #604]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 8001580:	f023 0304 	bic.w	r3, r3, #4
 8001584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d016      	beq.n	80015be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001590:	f7ff fa1a 	bl	80009c8 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001596:	e00a      	b.n	80015ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001598:	f7ff fa16 	bl	80009c8 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e12a      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ae:	4b8b      	ldr	r3, [pc, #556]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 80015b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0ed      	beq.n	8001598 <HAL_RCC_OscConfig+0x53c>
 80015bc:	e015      	b.n	80015ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015be:	f7ff fa03 	bl	80009c8 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015c4:	e00a      	b.n	80015dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c6:	f7ff f9ff 	bl	80009c8 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e113      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015dc:	4b7f      	ldr	r3, [pc, #508]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 80015de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1ed      	bne.n	80015c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ea:	7ffb      	ldrb	r3, [r7, #31]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d105      	bne.n	80015fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f0:	4b7a      	ldr	r3, [pc, #488]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f4:	4a79      	ldr	r2, [pc, #484]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 80015f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 80fe 	beq.w	8001802 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160a:	2b02      	cmp	r3, #2
 800160c:	f040 80d0 	bne.w	80017b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001610:	4b72      	ldr	r3, [pc, #456]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f003 0203 	and.w	r2, r3, #3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	429a      	cmp	r2, r3
 8001622:	d130      	bne.n	8001686 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	3b01      	subs	r3, #1
 8001630:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001632:	429a      	cmp	r2, r3
 8001634:	d127      	bne.n	8001686 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001640:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001642:	429a      	cmp	r2, r3
 8001644:	d11f      	bne.n	8001686 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001650:	2a07      	cmp	r2, #7
 8001652:	bf14      	ite	ne
 8001654:	2201      	movne	r2, #1
 8001656:	2200      	moveq	r2, #0
 8001658:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800165a:	4293      	cmp	r3, r2
 800165c:	d113      	bne.n	8001686 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001668:	085b      	lsrs	r3, r3, #1
 800166a:	3b01      	subs	r3, #1
 800166c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800166e:	429a      	cmp	r2, r3
 8001670:	d109      	bne.n	8001686 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	085b      	lsrs	r3, r3, #1
 800167e:	3b01      	subs	r3, #1
 8001680:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001682:	429a      	cmp	r2, r3
 8001684:	d06e      	beq.n	8001764 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	2b0c      	cmp	r3, #12
 800168a:	d069      	beq.n	8001760 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800168c:	4b53      	ldr	r3, [pc, #332]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d105      	bne.n	80016a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001698:	4b50      	ldr	r3, [pc, #320]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0ad      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016a8:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a4b      	ldr	r2, [pc, #300]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 80016ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016b4:	f7ff f988 	bl	80009c8 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff f984 	bl	80009c8 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e09a      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ce:	4b43      	ldr	r3, [pc, #268]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016da:	4b40      	ldr	r3, [pc, #256]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	4b40      	ldr	r3, [pc, #256]	; (80017e0 <HAL_RCC_OscConfig+0x784>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016ea:	3a01      	subs	r2, #1
 80016ec:	0112      	lsls	r2, r2, #4
 80016ee:	4311      	orrs	r1, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016f4:	0212      	lsls	r2, r2, #8
 80016f6:	4311      	orrs	r1, r2
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016fc:	0852      	lsrs	r2, r2, #1
 80016fe:	3a01      	subs	r2, #1
 8001700:	0552      	lsls	r2, r2, #21
 8001702:	4311      	orrs	r1, r2
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001708:	0852      	lsrs	r2, r2, #1
 800170a:	3a01      	subs	r2, #1
 800170c:	0652      	lsls	r2, r2, #25
 800170e:	4311      	orrs	r1, r2
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001714:	0912      	lsrs	r2, r2, #4
 8001716:	0452      	lsls	r2, r2, #17
 8001718:	430a      	orrs	r2, r1
 800171a:	4930      	ldr	r1, [pc, #192]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 800171c:	4313      	orrs	r3, r2
 800171e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001720:	4b2e      	ldr	r3, [pc, #184]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a2d      	ldr	r2, [pc, #180]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 8001726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800172a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4a2a      	ldr	r2, [pc, #168]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 8001732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001736:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001738:	f7ff f946 	bl	80009c8 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001740:	f7ff f942 	bl	80009c8 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e058      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001752:	4b22      	ldr	r3, [pc, #136]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800175e:	e050      	b.n	8001802 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e04f      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001764:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d148      	bne.n	8001802 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001770:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a19      	ldr	r2, [pc, #100]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 8001776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800177a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800177c:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	4a16      	ldr	r2, [pc, #88]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 8001782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001786:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001788:	f7ff f91e 	bl	80009c8 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001790:	f7ff f91a 	bl	80009c8 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e030      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x734>
 80017ae:	e028      	b.n	8001802 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2b0c      	cmp	r3, #12
 80017b4:	d023      	beq.n	80017fe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a08      	ldr	r2, [pc, #32]	; (80017dc <HAL_RCC_OscConfig+0x780>)
 80017bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c2:	f7ff f901 	bl	80009c8 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c8:	e00c      	b.n	80017e4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff f8fd 	bl	80009c8 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d905      	bls.n	80017e4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e013      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
 80017dc:	40021000 	.word	0x40021000
 80017e0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_RCC_OscConfig+0x7b0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1ec      	bne.n	80017ca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_RCC_OscConfig+0x7b0>)
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	4905      	ldr	r1, [pc, #20]	; (800180c <HAL_RCC_OscConfig+0x7b0>)
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_RCC_OscConfig+0x7b4>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	60cb      	str	r3, [r1, #12]
 80017fc:	e001      	b.n	8001802 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3720      	adds	r7, #32
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40021000 	.word	0x40021000
 8001810:	feeefffc 	.word	0xfeeefffc

08001814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0e7      	b.n	80019f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001828:	4b75      	ldr	r3, [pc, #468]	; (8001a00 <HAL_RCC_ClockConfig+0x1ec>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d910      	bls.n	8001858 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b72      	ldr	r3, [pc, #456]	; (8001a00 <HAL_RCC_ClockConfig+0x1ec>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 0207 	bic.w	r2, r3, #7
 800183e:	4970      	ldr	r1, [pc, #448]	; (8001a00 <HAL_RCC_ClockConfig+0x1ec>)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b6e      	ldr	r3, [pc, #440]	; (8001a00 <HAL_RCC_ClockConfig+0x1ec>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0cf      	b.n	80019f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d010      	beq.n	8001886 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	4b66      	ldr	r3, [pc, #408]	; (8001a04 <HAL_RCC_ClockConfig+0x1f0>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001870:	429a      	cmp	r2, r3
 8001872:	d908      	bls.n	8001886 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001874:	4b63      	ldr	r3, [pc, #396]	; (8001a04 <HAL_RCC_ClockConfig+0x1f0>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4960      	ldr	r1, [pc, #384]	; (8001a04 <HAL_RCC_ClockConfig+0x1f0>)
 8001882:	4313      	orrs	r3, r2
 8001884:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d04c      	beq.n	800192c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d107      	bne.n	80018aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189a:	4b5a      	ldr	r3, [pc, #360]	; (8001a04 <HAL_RCC_ClockConfig+0x1f0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d121      	bne.n	80018ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0a6      	b.n	80019f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018b2:	4b54      	ldr	r3, [pc, #336]	; (8001a04 <HAL_RCC_ClockConfig+0x1f0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d115      	bne.n	80018ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e09a      	b.n	80019f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ca:	4b4e      	ldr	r3, [pc, #312]	; (8001a04 <HAL_RCC_ClockConfig+0x1f0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d109      	bne.n	80018ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e08e      	b.n	80019f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018da:	4b4a      	ldr	r3, [pc, #296]	; (8001a04 <HAL_RCC_ClockConfig+0x1f0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e086      	b.n	80019f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018ea:	4b46      	ldr	r3, [pc, #280]	; (8001a04 <HAL_RCC_ClockConfig+0x1f0>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f023 0203 	bic.w	r2, r3, #3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4943      	ldr	r1, [pc, #268]	; (8001a04 <HAL_RCC_ClockConfig+0x1f0>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018fc:	f7ff f864 	bl	80009c8 <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001902:	e00a      	b.n	800191a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001904:	f7ff f860 	bl	80009c8 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e06e      	b.n	80019f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	4b3a      	ldr	r3, [pc, #232]	; (8001a04 <HAL_RCC_ClockConfig+0x1f0>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 020c 	and.w	r2, r3, #12
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	429a      	cmp	r2, r3
 800192a:	d1eb      	bne.n	8001904 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d010      	beq.n	800195a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	4b31      	ldr	r3, [pc, #196]	; (8001a04 <HAL_RCC_ClockConfig+0x1f0>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001944:	429a      	cmp	r2, r3
 8001946:	d208      	bcs.n	800195a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001948:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <HAL_RCC_ClockConfig+0x1f0>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	492b      	ldr	r1, [pc, #172]	; (8001a04 <HAL_RCC_ClockConfig+0x1f0>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800195a:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <HAL_RCC_ClockConfig+0x1ec>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d210      	bcs.n	800198a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001968:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <HAL_RCC_ClockConfig+0x1ec>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f023 0207 	bic.w	r2, r3, #7
 8001970:	4923      	ldr	r1, [pc, #140]	; (8001a00 <HAL_RCC_ClockConfig+0x1ec>)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	4313      	orrs	r3, r2
 8001976:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001978:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <HAL_RCC_ClockConfig+0x1ec>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d001      	beq.n	800198a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e036      	b.n	80019f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	2b00      	cmp	r3, #0
 8001994:	d008      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_RCC_ClockConfig+0x1f0>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	4918      	ldr	r1, [pc, #96]	; (8001a04 <HAL_RCC_ClockConfig+0x1f0>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d009      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <HAL_RCC_ClockConfig+0x1f0>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4910      	ldr	r1, [pc, #64]	; (8001a04 <HAL_RCC_ClockConfig+0x1f0>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019c8:	f000 f824 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 80019cc:	4602      	mov	r2, r0
 80019ce:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <HAL_RCC_ClockConfig+0x1f0>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	091b      	lsrs	r3, r3, #4
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	490b      	ldr	r1, [pc, #44]	; (8001a08 <HAL_RCC_ClockConfig+0x1f4>)
 80019da:	5ccb      	ldrb	r3, [r1, r3]
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
 80019e4:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <HAL_RCC_ClockConfig+0x1f8>)
 80019e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_RCC_ClockConfig+0x1fc>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe ff9b 	bl	8000928 <HAL_InitTick>
 80019f2:	4603      	mov	r3, r0
 80019f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80019f6:	7afb      	ldrb	r3, [r7, #11]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40022000 	.word	0x40022000
 8001a04:	40021000 	.word	0x40021000
 8001a08:	0800307c 	.word	0x0800307c
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000004 	.word	0x20000004

08001a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a22:	4b3e      	ldr	r3, [pc, #248]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a2c:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0x34>
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	2b0c      	cmp	r3, #12
 8001a40:	d121      	bne.n	8001a86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d11e      	bne.n	8001a86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a48:	4b34      	ldr	r3, [pc, #208]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d107      	bne.n	8001a64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a54:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5a:	0a1b      	lsrs	r3, r3, #8
 8001a5c:	f003 030f 	and.w	r3, r3, #15
 8001a60:	61fb      	str	r3, [r7, #28]
 8001a62:	e005      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a64:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a70:	4a2b      	ldr	r2, [pc, #172]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10d      	bne.n	8001a9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a84:	e00a      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d102      	bne.n	8001a92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a8c:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a8e:	61bb      	str	r3, [r7, #24]
 8001a90:	e004      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a98:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d134      	bne.n	8001b0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d003      	beq.n	8001aba <HAL_RCC_GetSysClockFreq+0xa6>
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d003      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0xac>
 8001ab8:	e005      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001aba:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x110>)
 8001abc:	617b      	str	r3, [r7, #20]
      break;
 8001abe:	e005      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ac0:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ac2:	617b      	str	r3, [r7, #20]
      break;
 8001ac4:	e002      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	617b      	str	r3, [r7, #20]
      break;
 8001aca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	091b      	lsrs	r3, r3, #4
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	0a1b      	lsrs	r3, r3, #8
 8001ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	fb03 f202 	mul.w	r2, r3, r2
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	0e5b      	lsrs	r3, r3, #25
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	3301      	adds	r3, #1
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b0c:	69bb      	ldr	r3, [r7, #24]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	08003094 	.word	0x08003094
 8001b24:	00f42400 	.word	0x00f42400
 8001b28:	007a1200 	.word	0x007a1200

08001b2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000000 	.word	0x20000000

08001b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b48:	f7ff fff0 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	0a1b      	lsrs	r3, r3, #8
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4904      	ldr	r1, [pc, #16]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	0800308c 	.word	0x0800308c

08001b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b74:	f7ff ffda 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	0adb      	lsrs	r3, r3, #11
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	4904      	ldr	r1, [pc, #16]	; (8001b98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000
 8001b98:	0800308c 	.word	0x0800308c

08001b9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ba8:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bb4:	f7ff f9ee 	bl	8000f94 <HAL_PWREx_GetVoltageRange>
 8001bb8:	6178      	str	r0, [r7, #20]
 8001bba:	e014      	b.n	8001be6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bbc:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc0:	4a24      	ldr	r2, [pc, #144]	; (8001c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bd4:	f7ff f9de 	bl	8000f94 <HAL_PWREx_GetVoltageRange>
 8001bd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bda:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bde:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bec:	d10b      	bne.n	8001c06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b80      	cmp	r3, #128	; 0x80
 8001bf2:	d919      	bls.n	8001c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2ba0      	cmp	r3, #160	; 0xa0
 8001bf8:	d902      	bls.n	8001c00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	e013      	b.n	8001c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c00:	2301      	movs	r3, #1
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	e010      	b.n	8001c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b80      	cmp	r3, #128	; 0x80
 8001c0a:	d902      	bls.n	8001c12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	e00a      	b.n	8001c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b80      	cmp	r3, #128	; 0x80
 8001c16:	d102      	bne.n	8001c1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c18:	2302      	movs	r3, #2
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	e004      	b.n	8001c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b70      	cmp	r3, #112	; 0x70
 8001c22:	d101      	bne.n	8001c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c24:	2301      	movs	r3, #1
 8001c26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 0207 	bic.w	r2, r3, #7
 8001c30:	4909      	ldr	r1, [pc, #36]	; (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d001      	beq.n	8001c4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40022000 	.word	0x40022000

08001c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c64:	2300      	movs	r3, #0
 8001c66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c68:	2300      	movs	r3, #0
 8001c6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d041      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c80:	d02a      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001c82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c86:	d824      	bhi.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c8c:	d008      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001c8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c92:	d81e      	bhi.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00a      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c9c:	d010      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001c9e:	e018      	b.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ca0:	4b86      	ldr	r3, [pc, #536]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	4a85      	ldr	r2, [pc, #532]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001caa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cac:	e015      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 fabb 	bl	8002230 <RCCEx_PLLSAI1_Config>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cbe:	e00c      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3320      	adds	r3, #32
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 fba6 	bl	8002418 <RCCEx_PLLSAI2_Config>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cd0:	e003      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	74fb      	strb	r3, [r7, #19]
      break;
 8001cd6:	e000      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001cda:	7cfb      	ldrb	r3, [r7, #19]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10b      	bne.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ce0:	4b76      	ldr	r3, [pc, #472]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cee:	4973      	ldr	r1, [pc, #460]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001cf6:	e001      	b.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cf8:	7cfb      	ldrb	r3, [r7, #19]
 8001cfa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d041      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d10:	d02a      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001d12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d16:	d824      	bhi.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d1c:	d008      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d22:	d81e      	bhi.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00a      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d2c:	d010      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d2e:	e018      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d30:	4b62      	ldr	r3, [pc, #392]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4a61      	ldr	r2, [pc, #388]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d3c:	e015      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3304      	adds	r3, #4
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 fa73 	bl	8002230 <RCCEx_PLLSAI1_Config>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d4e:	e00c      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3320      	adds	r3, #32
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 fb5e 	bl	8002418 <RCCEx_PLLSAI2_Config>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d60:	e003      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	74fb      	strb	r3, [r7, #19]
      break;
 8001d66:	e000      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d6a:	7cfb      	ldrb	r3, [r7, #19]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10b      	bne.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d70:	4b52      	ldr	r3, [pc, #328]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d7e:	494f      	ldr	r1, [pc, #316]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d86:	e001      	b.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d88:	7cfb      	ldrb	r3, [r7, #19]
 8001d8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80a0 	beq.w	8001eda <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001dae:	2300      	movs	r3, #0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00d      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db4:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	4a40      	ldr	r2, [pc, #256]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc0:	4b3e      	ldr	r3, [pc, #248]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dd0:	4b3b      	ldr	r3, [pc, #236]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a3a      	ldr	r2, [pc, #232]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ddc:	f7fe fdf4 	bl	80009c8 <HAL_GetTick>
 8001de0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001de2:	e009      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de4:	f7fe fdf0 	bl	80009c8 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d902      	bls.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	74fb      	strb	r3, [r7, #19]
        break;
 8001df6:	e005      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001df8:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ef      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001e04:	7cfb      	ldrb	r3, [r7, #19]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d15c      	bne.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e0a:	4b2c      	ldr	r3, [pc, #176]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d01f      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d019      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e28:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e34:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3a:	4a20      	ldr	r2, [pc, #128]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e44:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e54:	4a19      	ldr	r2, [pc, #100]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d016      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e66:	f7fe fdaf 	bl	80009c8 <HAL_GetTick>
 8001e6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e6c:	e00b      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6e:	f7fe fdab 	bl	80009c8 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d902      	bls.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	74fb      	strb	r3, [r7, #19]
            break;
 8001e84:	e006      	b.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e86:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0ec      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001e94:	7cfb      	ldrb	r3, [r7, #19]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eaa:	4904      	ldr	r1, [pc, #16]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001eb2:	e009      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001eb4:	7cfb      	ldrb	r3, [r7, #19]
 8001eb6:	74bb      	strb	r3, [r7, #18]
 8001eb8:	e006      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ec4:	7cfb      	ldrb	r3, [r7, #19]
 8001ec6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ec8:	7c7b      	ldrb	r3, [r7, #17]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d105      	bne.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ece:	4b9e      	ldr	r3, [pc, #632]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	4a9d      	ldr	r2, [pc, #628]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00a      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ee6:	4b98      	ldr	r3, [pc, #608]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eec:	f023 0203 	bic.w	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef4:	4994      	ldr	r1, [pc, #592]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00a      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f08:	4b8f      	ldr	r3, [pc, #572]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0e:	f023 020c 	bic.w	r2, r3, #12
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f16:	498c      	ldr	r1, [pc, #560]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00a      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f2a:	4b87      	ldr	r3, [pc, #540]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	4983      	ldr	r1, [pc, #524]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00a      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f4c:	4b7e      	ldr	r3, [pc, #504]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	497b      	ldr	r1, [pc, #492]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f6e:	4b76      	ldr	r3, [pc, #472]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f7c:	4972      	ldr	r1, [pc, #456]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0320 	and.w	r3, r3, #32
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00a      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f90:	4b6d      	ldr	r3, [pc, #436]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	496a      	ldr	r1, [pc, #424]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fb2:	4b65      	ldr	r3, [pc, #404]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc0:	4961      	ldr	r1, [pc, #388]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00a      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fd4:	4b5c      	ldr	r3, [pc, #368]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe2:	4959      	ldr	r1, [pc, #356]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00a      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ff6:	4b54      	ldr	r3, [pc, #336]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002004:	4950      	ldr	r1, [pc, #320]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00a      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002018:	4b4b      	ldr	r3, [pc, #300]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	4948      	ldr	r1, [pc, #288]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800203a:	4b43      	ldr	r3, [pc, #268]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002040:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	493f      	ldr	r1, [pc, #252]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d028      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800205c:	4b3a      	ldr	r3, [pc, #232]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002062:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800206a:	4937      	ldr	r1, [pc, #220]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002076:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800207a:	d106      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800207c:	4b32      	ldr	r3, [pc, #200]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4a31      	ldr	r2, [pc, #196]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002086:	60d3      	str	r3, [r2, #12]
 8002088:	e011      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800208e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002092:	d10c      	bne.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3304      	adds	r3, #4
 8002098:	2101      	movs	r1, #1
 800209a:	4618      	mov	r0, r3
 800209c:	f000 f8c8 	bl	8002230 <RCCEx_PLLSAI1_Config>
 80020a0:	4603      	mov	r3, r0
 80020a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020a4:	7cfb      	ldrb	r3, [r7, #19]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80020aa:	7cfb      	ldrb	r3, [r7, #19]
 80020ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d028      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020ba:	4b23      	ldr	r3, [pc, #140]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c8:	491f      	ldr	r1, [pc, #124]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020d8:	d106      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	4a1a      	ldr	r2, [pc, #104]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020e4:	60d3      	str	r3, [r2, #12]
 80020e6:	e011      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020f0:	d10c      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3304      	adds	r3, #4
 80020f6:	2101      	movs	r1, #1
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 f899 	bl	8002230 <RCCEx_PLLSAI1_Config>
 80020fe:	4603      	mov	r3, r0
 8002100:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002102:	7cfb      	ldrb	r3, [r7, #19]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002108:	7cfb      	ldrb	r3, [r7, #19]
 800210a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d02b      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002126:	4908      	ldr	r1, [pc, #32]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002136:	d109      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4a02      	ldr	r2, [pc, #8]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002142:	60d3      	str	r3, [r2, #12]
 8002144:	e014      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002154:	d10c      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3304      	adds	r3, #4
 800215a:	2101      	movs	r1, #1
 800215c:	4618      	mov	r0, r3
 800215e:	f000 f867 	bl	8002230 <RCCEx_PLLSAI1_Config>
 8002162:	4603      	mov	r3, r0
 8002164:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002166:	7cfb      	ldrb	r3, [r7, #19]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800216c:	7cfb      	ldrb	r3, [r7, #19]
 800216e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d02f      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800217c:	4b2b      	ldr	r3, [pc, #172]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002182:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800218a:	4928      	ldr	r1, [pc, #160]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800219a:	d10d      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3304      	adds	r3, #4
 80021a0:	2102      	movs	r1, #2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f844 	bl	8002230 <RCCEx_PLLSAI1_Config>
 80021a8:	4603      	mov	r3, r0
 80021aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021ac:	7cfb      	ldrb	r3, [r7, #19]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d014      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80021b2:	7cfb      	ldrb	r3, [r7, #19]
 80021b4:	74bb      	strb	r3, [r7, #18]
 80021b6:	e011      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021c0:	d10c      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3320      	adds	r3, #32
 80021c6:	2102      	movs	r1, #2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 f925 	bl	8002418 <RCCEx_PLLSAI2_Config>
 80021ce:	4603      	mov	r3, r0
 80021d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021d2:	7cfb      	ldrb	r3, [r7, #19]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80021d8:	7cfb      	ldrb	r3, [r7, #19]
 80021da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021e8:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021f6:	490d      	ldr	r1, [pc, #52]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800220c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002210:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800221a:	4904      	ldr	r1, [pc, #16]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002222:	7cbb      	ldrb	r3, [r7, #18]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000

08002230 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800223e:	4b75      	ldr	r3, [pc, #468]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d018      	beq.n	800227c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800224a:	4b72      	ldr	r3, [pc, #456]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f003 0203 	and.w	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d10d      	bne.n	8002276 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
       ||
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002262:	4b6c      	ldr	r3, [pc, #432]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
       ||
 8002272:	429a      	cmp	r2, r3
 8002274:	d047      	beq.n	8002306 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	e044      	b.n	8002306 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d018      	beq.n	80022b6 <RCCEx_PLLSAI1_Config+0x86>
 8002284:	2b03      	cmp	r3, #3
 8002286:	d825      	bhi.n	80022d4 <RCCEx_PLLSAI1_Config+0xa4>
 8002288:	2b01      	cmp	r3, #1
 800228a:	d002      	beq.n	8002292 <RCCEx_PLLSAI1_Config+0x62>
 800228c:	2b02      	cmp	r3, #2
 800228e:	d009      	beq.n	80022a4 <RCCEx_PLLSAI1_Config+0x74>
 8002290:	e020      	b.n	80022d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002292:	4b60      	ldr	r3, [pc, #384]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d11d      	bne.n	80022da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a2:	e01a      	b.n	80022da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022a4:	4b5b      	ldr	r3, [pc, #364]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d116      	bne.n	80022de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b4:	e013      	b.n	80022de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022b6:	4b57      	ldr	r3, [pc, #348]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10f      	bne.n	80022e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022c2:	4b54      	ldr	r3, [pc, #336]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022d2:	e006      	b.n	80022e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
      break;
 80022d8:	e004      	b.n	80022e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022da:	bf00      	nop
 80022dc:	e002      	b.n	80022e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022de:	bf00      	nop
 80022e0:	e000      	b.n	80022e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10d      	bne.n	8002306 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022ea:	4b4a      	ldr	r3, [pc, #296]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6819      	ldr	r1, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	430b      	orrs	r3, r1
 8002300:	4944      	ldr	r1, [pc, #272]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002302:	4313      	orrs	r3, r2
 8002304:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d17d      	bne.n	8002408 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800230c:	4b41      	ldr	r3, [pc, #260]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a40      	ldr	r2, [pc, #256]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002312:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002316:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002318:	f7fe fb56 	bl	80009c8 <HAL_GetTick>
 800231c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800231e:	e009      	b.n	8002334 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002320:	f7fe fb52 	bl	80009c8 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d902      	bls.n	8002334 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	73fb      	strb	r3, [r7, #15]
        break;
 8002332:	e005      	b.n	8002340 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002334:	4b37      	ldr	r3, [pc, #220]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ef      	bne.n	8002320 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d160      	bne.n	8002408 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d111      	bne.n	8002370 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800234c:	4b31      	ldr	r3, [pc, #196]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6892      	ldr	r2, [r2, #8]
 800235c:	0211      	lsls	r1, r2, #8
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68d2      	ldr	r2, [r2, #12]
 8002362:	0912      	lsrs	r2, r2, #4
 8002364:	0452      	lsls	r2, r2, #17
 8002366:	430a      	orrs	r2, r1
 8002368:	492a      	ldr	r1, [pc, #168]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 800236a:	4313      	orrs	r3, r2
 800236c:	610b      	str	r3, [r1, #16]
 800236e:	e027      	b.n	80023c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d112      	bne.n	800239c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002376:	4b27      	ldr	r3, [pc, #156]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800237e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6892      	ldr	r2, [r2, #8]
 8002386:	0211      	lsls	r1, r2, #8
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6912      	ldr	r2, [r2, #16]
 800238c:	0852      	lsrs	r2, r2, #1
 800238e:	3a01      	subs	r2, #1
 8002390:	0552      	lsls	r2, r2, #21
 8002392:	430a      	orrs	r2, r1
 8002394:	491f      	ldr	r1, [pc, #124]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002396:	4313      	orrs	r3, r2
 8002398:	610b      	str	r3, [r1, #16]
 800239a:	e011      	b.n	80023c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800239c:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6892      	ldr	r2, [r2, #8]
 80023ac:	0211      	lsls	r1, r2, #8
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6952      	ldr	r2, [r2, #20]
 80023b2:	0852      	lsrs	r2, r2, #1
 80023b4:	3a01      	subs	r2, #1
 80023b6:	0652      	lsls	r2, r2, #25
 80023b8:	430a      	orrs	r2, r1
 80023ba:	4916      	ldr	r1, [pc, #88]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023c0:	4b14      	ldr	r3, [pc, #80]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a13      	ldr	r2, [pc, #76]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023cc:	f7fe fafc 	bl	80009c8 <HAL_GetTick>
 80023d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023d2:	e009      	b.n	80023e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023d4:	f7fe faf8 	bl	80009c8 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d902      	bls.n	80023e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	73fb      	strb	r3, [r7, #15]
          break;
 80023e6:	e005      	b.n	80023f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0ef      	beq.n	80023d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	4904      	ldr	r1, [pc, #16]	; (8002414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002404:	4313      	orrs	r3, r2
 8002406:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000

08002418 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002426:	4b6a      	ldr	r3, [pc, #424]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d018      	beq.n	8002464 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002432:	4b67      	ldr	r3, [pc, #412]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f003 0203 	and.w	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d10d      	bne.n	800245e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
       ||
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800244a:	4b61      	ldr	r3, [pc, #388]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
       ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d047      	beq.n	80024ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	e044      	b.n	80024ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b03      	cmp	r3, #3
 800246a:	d018      	beq.n	800249e <RCCEx_PLLSAI2_Config+0x86>
 800246c:	2b03      	cmp	r3, #3
 800246e:	d825      	bhi.n	80024bc <RCCEx_PLLSAI2_Config+0xa4>
 8002470:	2b01      	cmp	r3, #1
 8002472:	d002      	beq.n	800247a <RCCEx_PLLSAI2_Config+0x62>
 8002474:	2b02      	cmp	r3, #2
 8002476:	d009      	beq.n	800248c <RCCEx_PLLSAI2_Config+0x74>
 8002478:	e020      	b.n	80024bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800247a:	4b55      	ldr	r3, [pc, #340]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d11d      	bne.n	80024c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248a:	e01a      	b.n	80024c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800248c:	4b50      	ldr	r3, [pc, #320]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002494:	2b00      	cmp	r3, #0
 8002496:	d116      	bne.n	80024c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800249c:	e013      	b.n	80024c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800249e:	4b4c      	ldr	r3, [pc, #304]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10f      	bne.n	80024ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024aa:	4b49      	ldr	r3, [pc, #292]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024ba:	e006      	b.n	80024ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      break;
 80024c0:	e004      	b.n	80024cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024c2:	bf00      	nop
 80024c4:	e002      	b.n	80024cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024c6:	bf00      	nop
 80024c8:	e000      	b.n	80024cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10d      	bne.n	80024ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024d2:	4b3f      	ldr	r3, [pc, #252]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6819      	ldr	r1, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	430b      	orrs	r3, r1
 80024e8:	4939      	ldr	r1, [pc, #228]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d167      	bne.n	80025c4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80024f4:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a35      	ldr	r2, [pc, #212]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002500:	f7fe fa62 	bl	80009c8 <HAL_GetTick>
 8002504:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002506:	e009      	b.n	800251c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002508:	f7fe fa5e 	bl	80009c8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d902      	bls.n	800251c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	73fb      	strb	r3, [r7, #15]
        break;
 800251a:	e005      	b.n	8002528 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800251c:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1ef      	bne.n	8002508 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d14a      	bne.n	80025c4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d111      	bne.n	8002558 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002534:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800253c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6892      	ldr	r2, [r2, #8]
 8002544:	0211      	lsls	r1, r2, #8
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68d2      	ldr	r2, [r2, #12]
 800254a:	0912      	lsrs	r2, r2, #4
 800254c:	0452      	lsls	r2, r2, #17
 800254e:	430a      	orrs	r2, r1
 8002550:	491f      	ldr	r1, [pc, #124]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002552:	4313      	orrs	r3, r2
 8002554:	614b      	str	r3, [r1, #20]
 8002556:	e011      	b.n	800257c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002558:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002560:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6892      	ldr	r2, [r2, #8]
 8002568:	0211      	lsls	r1, r2, #8
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6912      	ldr	r2, [r2, #16]
 800256e:	0852      	lsrs	r2, r2, #1
 8002570:	3a01      	subs	r2, #1
 8002572:	0652      	lsls	r2, r2, #25
 8002574:	430a      	orrs	r2, r1
 8002576:	4916      	ldr	r1, [pc, #88]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002578:	4313      	orrs	r3, r2
 800257a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a13      	ldr	r2, [pc, #76]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002586:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002588:	f7fe fa1e 	bl	80009c8 <HAL_GetTick>
 800258c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800258e:	e009      	b.n	80025a4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002590:	f7fe fa1a 	bl	80009c8 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d902      	bls.n	80025a4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	73fb      	strb	r3, [r7, #15]
          break;
 80025a2:	e005      	b.n	80025b0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ef      	beq.n	8002590 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	4904      	ldr	r1, [pc, #16]	; (80025d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000

080025d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e040      	b.n	8002668 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7fe f8b4 	bl	8000764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2224      	movs	r2, #36	; 0x24
 8002600:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0201 	bic.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fae0 	bl	8002be0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f825 	bl	8002670 <UART_SetConfig>
 8002626:	4603      	mov	r3, r0
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e01b      	b.n	8002668 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800263e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800264e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fb5f 	bl	8002d24 <UART_CheckIdleState>
 8002666:	4603      	mov	r3, r0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002674:	b08a      	sub	sp, #40	; 0x28
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	431a      	orrs	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	431a      	orrs	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	4313      	orrs	r3, r2
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	4ba4      	ldr	r3, [pc, #656]	; (8002930 <UART_SetConfig+0x2c0>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026a8:	430b      	orrs	r3, r1
 80026aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a99      	ldr	r2, [pc, #612]	; (8002934 <UART_SetConfig+0x2c4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d004      	beq.n	80026dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d8:	4313      	orrs	r3, r2
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ec:	430a      	orrs	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a90      	ldr	r2, [pc, #576]	; (8002938 <UART_SetConfig+0x2c8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d126      	bne.n	8002748 <UART_SetConfig+0xd8>
 80026fa:	4b90      	ldr	r3, [pc, #576]	; (800293c <UART_SetConfig+0x2cc>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	2b03      	cmp	r3, #3
 8002706:	d81b      	bhi.n	8002740 <UART_SetConfig+0xd0>
 8002708:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <UART_SetConfig+0xa0>)
 800270a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270e:	bf00      	nop
 8002710:	08002721 	.word	0x08002721
 8002714:	08002731 	.word	0x08002731
 8002718:	08002729 	.word	0x08002729
 800271c:	08002739 	.word	0x08002739
 8002720:	2301      	movs	r3, #1
 8002722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002726:	e116      	b.n	8002956 <UART_SetConfig+0x2e6>
 8002728:	2302      	movs	r3, #2
 800272a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800272e:	e112      	b.n	8002956 <UART_SetConfig+0x2e6>
 8002730:	2304      	movs	r3, #4
 8002732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002736:	e10e      	b.n	8002956 <UART_SetConfig+0x2e6>
 8002738:	2308      	movs	r3, #8
 800273a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800273e:	e10a      	b.n	8002956 <UART_SetConfig+0x2e6>
 8002740:	2310      	movs	r3, #16
 8002742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002746:	e106      	b.n	8002956 <UART_SetConfig+0x2e6>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a7c      	ldr	r2, [pc, #496]	; (8002940 <UART_SetConfig+0x2d0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d138      	bne.n	80027c4 <UART_SetConfig+0x154>
 8002752:	4b7a      	ldr	r3, [pc, #488]	; (800293c <UART_SetConfig+0x2cc>)
 8002754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002758:	f003 030c 	and.w	r3, r3, #12
 800275c:	2b0c      	cmp	r3, #12
 800275e:	d82d      	bhi.n	80027bc <UART_SetConfig+0x14c>
 8002760:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <UART_SetConfig+0xf8>)
 8002762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002766:	bf00      	nop
 8002768:	0800279d 	.word	0x0800279d
 800276c:	080027bd 	.word	0x080027bd
 8002770:	080027bd 	.word	0x080027bd
 8002774:	080027bd 	.word	0x080027bd
 8002778:	080027ad 	.word	0x080027ad
 800277c:	080027bd 	.word	0x080027bd
 8002780:	080027bd 	.word	0x080027bd
 8002784:	080027bd 	.word	0x080027bd
 8002788:	080027a5 	.word	0x080027a5
 800278c:	080027bd 	.word	0x080027bd
 8002790:	080027bd 	.word	0x080027bd
 8002794:	080027bd 	.word	0x080027bd
 8002798:	080027b5 	.word	0x080027b5
 800279c:	2300      	movs	r3, #0
 800279e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027a2:	e0d8      	b.n	8002956 <UART_SetConfig+0x2e6>
 80027a4:	2302      	movs	r3, #2
 80027a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027aa:	e0d4      	b.n	8002956 <UART_SetConfig+0x2e6>
 80027ac:	2304      	movs	r3, #4
 80027ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027b2:	e0d0      	b.n	8002956 <UART_SetConfig+0x2e6>
 80027b4:	2308      	movs	r3, #8
 80027b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027ba:	e0cc      	b.n	8002956 <UART_SetConfig+0x2e6>
 80027bc:	2310      	movs	r3, #16
 80027be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027c2:	e0c8      	b.n	8002956 <UART_SetConfig+0x2e6>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a5e      	ldr	r2, [pc, #376]	; (8002944 <UART_SetConfig+0x2d4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d125      	bne.n	800281a <UART_SetConfig+0x1aa>
 80027ce:	4b5b      	ldr	r3, [pc, #364]	; (800293c <UART_SetConfig+0x2cc>)
 80027d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80027d8:	2b30      	cmp	r3, #48	; 0x30
 80027da:	d016      	beq.n	800280a <UART_SetConfig+0x19a>
 80027dc:	2b30      	cmp	r3, #48	; 0x30
 80027de:	d818      	bhi.n	8002812 <UART_SetConfig+0x1a2>
 80027e0:	2b20      	cmp	r3, #32
 80027e2:	d00a      	beq.n	80027fa <UART_SetConfig+0x18a>
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	d814      	bhi.n	8002812 <UART_SetConfig+0x1a2>
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <UART_SetConfig+0x182>
 80027ec:	2b10      	cmp	r3, #16
 80027ee:	d008      	beq.n	8002802 <UART_SetConfig+0x192>
 80027f0:	e00f      	b.n	8002812 <UART_SetConfig+0x1a2>
 80027f2:	2300      	movs	r3, #0
 80027f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027f8:	e0ad      	b.n	8002956 <UART_SetConfig+0x2e6>
 80027fa:	2302      	movs	r3, #2
 80027fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002800:	e0a9      	b.n	8002956 <UART_SetConfig+0x2e6>
 8002802:	2304      	movs	r3, #4
 8002804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002808:	e0a5      	b.n	8002956 <UART_SetConfig+0x2e6>
 800280a:	2308      	movs	r3, #8
 800280c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002810:	e0a1      	b.n	8002956 <UART_SetConfig+0x2e6>
 8002812:	2310      	movs	r3, #16
 8002814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002818:	e09d      	b.n	8002956 <UART_SetConfig+0x2e6>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a4a      	ldr	r2, [pc, #296]	; (8002948 <UART_SetConfig+0x2d8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d125      	bne.n	8002870 <UART_SetConfig+0x200>
 8002824:	4b45      	ldr	r3, [pc, #276]	; (800293c <UART_SetConfig+0x2cc>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800282e:	2bc0      	cmp	r3, #192	; 0xc0
 8002830:	d016      	beq.n	8002860 <UART_SetConfig+0x1f0>
 8002832:	2bc0      	cmp	r3, #192	; 0xc0
 8002834:	d818      	bhi.n	8002868 <UART_SetConfig+0x1f8>
 8002836:	2b80      	cmp	r3, #128	; 0x80
 8002838:	d00a      	beq.n	8002850 <UART_SetConfig+0x1e0>
 800283a:	2b80      	cmp	r3, #128	; 0x80
 800283c:	d814      	bhi.n	8002868 <UART_SetConfig+0x1f8>
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <UART_SetConfig+0x1d8>
 8002842:	2b40      	cmp	r3, #64	; 0x40
 8002844:	d008      	beq.n	8002858 <UART_SetConfig+0x1e8>
 8002846:	e00f      	b.n	8002868 <UART_SetConfig+0x1f8>
 8002848:	2300      	movs	r3, #0
 800284a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800284e:	e082      	b.n	8002956 <UART_SetConfig+0x2e6>
 8002850:	2302      	movs	r3, #2
 8002852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002856:	e07e      	b.n	8002956 <UART_SetConfig+0x2e6>
 8002858:	2304      	movs	r3, #4
 800285a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800285e:	e07a      	b.n	8002956 <UART_SetConfig+0x2e6>
 8002860:	2308      	movs	r3, #8
 8002862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002866:	e076      	b.n	8002956 <UART_SetConfig+0x2e6>
 8002868:	2310      	movs	r3, #16
 800286a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800286e:	e072      	b.n	8002956 <UART_SetConfig+0x2e6>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a35      	ldr	r2, [pc, #212]	; (800294c <UART_SetConfig+0x2dc>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d12a      	bne.n	80028d0 <UART_SetConfig+0x260>
 800287a:	4b30      	ldr	r3, [pc, #192]	; (800293c <UART_SetConfig+0x2cc>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002884:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002888:	d01a      	beq.n	80028c0 <UART_SetConfig+0x250>
 800288a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800288e:	d81b      	bhi.n	80028c8 <UART_SetConfig+0x258>
 8002890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002894:	d00c      	beq.n	80028b0 <UART_SetConfig+0x240>
 8002896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800289a:	d815      	bhi.n	80028c8 <UART_SetConfig+0x258>
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <UART_SetConfig+0x238>
 80028a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a4:	d008      	beq.n	80028b8 <UART_SetConfig+0x248>
 80028a6:	e00f      	b.n	80028c8 <UART_SetConfig+0x258>
 80028a8:	2300      	movs	r3, #0
 80028aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028ae:	e052      	b.n	8002956 <UART_SetConfig+0x2e6>
 80028b0:	2302      	movs	r3, #2
 80028b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028b6:	e04e      	b.n	8002956 <UART_SetConfig+0x2e6>
 80028b8:	2304      	movs	r3, #4
 80028ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028be:	e04a      	b.n	8002956 <UART_SetConfig+0x2e6>
 80028c0:	2308      	movs	r3, #8
 80028c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028c6:	e046      	b.n	8002956 <UART_SetConfig+0x2e6>
 80028c8:	2310      	movs	r3, #16
 80028ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028ce:	e042      	b.n	8002956 <UART_SetConfig+0x2e6>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a17      	ldr	r2, [pc, #92]	; (8002934 <UART_SetConfig+0x2c4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d13a      	bne.n	8002950 <UART_SetConfig+0x2e0>
 80028da:	4b18      	ldr	r3, [pc, #96]	; (800293c <UART_SetConfig+0x2cc>)
 80028dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028e8:	d01a      	beq.n	8002920 <UART_SetConfig+0x2b0>
 80028ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028ee:	d81b      	bhi.n	8002928 <UART_SetConfig+0x2b8>
 80028f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028f4:	d00c      	beq.n	8002910 <UART_SetConfig+0x2a0>
 80028f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028fa:	d815      	bhi.n	8002928 <UART_SetConfig+0x2b8>
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <UART_SetConfig+0x298>
 8002900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002904:	d008      	beq.n	8002918 <UART_SetConfig+0x2a8>
 8002906:	e00f      	b.n	8002928 <UART_SetConfig+0x2b8>
 8002908:	2300      	movs	r3, #0
 800290a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800290e:	e022      	b.n	8002956 <UART_SetConfig+0x2e6>
 8002910:	2302      	movs	r3, #2
 8002912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002916:	e01e      	b.n	8002956 <UART_SetConfig+0x2e6>
 8002918:	2304      	movs	r3, #4
 800291a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800291e:	e01a      	b.n	8002956 <UART_SetConfig+0x2e6>
 8002920:	2308      	movs	r3, #8
 8002922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002926:	e016      	b.n	8002956 <UART_SetConfig+0x2e6>
 8002928:	2310      	movs	r3, #16
 800292a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800292e:	e012      	b.n	8002956 <UART_SetConfig+0x2e6>
 8002930:	efff69f3 	.word	0xefff69f3
 8002934:	40008000 	.word	0x40008000
 8002938:	40013800 	.word	0x40013800
 800293c:	40021000 	.word	0x40021000
 8002940:	40004400 	.word	0x40004400
 8002944:	40004800 	.word	0x40004800
 8002948:	40004c00 	.word	0x40004c00
 800294c:	40005000 	.word	0x40005000
 8002950:	2310      	movs	r3, #16
 8002952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a9f      	ldr	r2, [pc, #636]	; (8002bd8 <UART_SetConfig+0x568>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d17a      	bne.n	8002a56 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002960:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002964:	2b08      	cmp	r3, #8
 8002966:	d824      	bhi.n	80029b2 <UART_SetConfig+0x342>
 8002968:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <UART_SetConfig+0x300>)
 800296a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296e:	bf00      	nop
 8002970:	08002995 	.word	0x08002995
 8002974:	080029b3 	.word	0x080029b3
 8002978:	0800299d 	.word	0x0800299d
 800297c:	080029b3 	.word	0x080029b3
 8002980:	080029a3 	.word	0x080029a3
 8002984:	080029b3 	.word	0x080029b3
 8002988:	080029b3 	.word	0x080029b3
 800298c:	080029b3 	.word	0x080029b3
 8002990:	080029ab 	.word	0x080029ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002994:	f7ff f8d6 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 8002998:	61f8      	str	r0, [r7, #28]
        break;
 800299a:	e010      	b.n	80029be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800299c:	4b8f      	ldr	r3, [pc, #572]	; (8002bdc <UART_SetConfig+0x56c>)
 800299e:	61fb      	str	r3, [r7, #28]
        break;
 80029a0:	e00d      	b.n	80029be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029a2:	f7ff f837 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 80029a6:	61f8      	str	r0, [r7, #28]
        break;
 80029a8:	e009      	b.n	80029be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ae:	61fb      	str	r3, [r7, #28]
        break;
 80029b0:	e005      	b.n	80029be <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80029bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80fb 	beq.w	8002bbc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	4413      	add	r3, r2
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d305      	bcc.n	80029e2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d903      	bls.n	80029ea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80029e8:	e0e8      	b.n	8002bbc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	2200      	movs	r2, #0
 80029ee:	461c      	mov	r4, r3
 80029f0:	4615      	mov	r5, r2
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	022b      	lsls	r3, r5, #8
 80029fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002a00:	0222      	lsls	r2, r4, #8
 8002a02:	68f9      	ldr	r1, [r7, #12]
 8002a04:	6849      	ldr	r1, [r1, #4]
 8002a06:	0849      	lsrs	r1, r1, #1
 8002a08:	2000      	movs	r0, #0
 8002a0a:	4688      	mov	r8, r1
 8002a0c:	4681      	mov	r9, r0
 8002a0e:	eb12 0a08 	adds.w	sl, r2, r8
 8002a12:	eb43 0b09 	adc.w	fp, r3, r9
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	603b      	str	r3, [r7, #0]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a24:	4650      	mov	r0, sl
 8002a26:	4659      	mov	r1, fp
 8002a28:	f7fd fbce 	bl	80001c8 <__aeabi_uldivmod>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4613      	mov	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a3a:	d308      	bcc.n	8002a4e <UART_SetConfig+0x3de>
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a42:	d204      	bcs.n	8002a4e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	60da      	str	r2, [r3, #12]
 8002a4c:	e0b6      	b.n	8002bbc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002a54:	e0b2      	b.n	8002bbc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a5e:	d15e      	bne.n	8002b1e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002a60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d828      	bhi.n	8002aba <UART_SetConfig+0x44a>
 8002a68:	a201      	add	r2, pc, #4	; (adr r2, 8002a70 <UART_SetConfig+0x400>)
 8002a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6e:	bf00      	nop
 8002a70:	08002a95 	.word	0x08002a95
 8002a74:	08002a9d 	.word	0x08002a9d
 8002a78:	08002aa5 	.word	0x08002aa5
 8002a7c:	08002abb 	.word	0x08002abb
 8002a80:	08002aab 	.word	0x08002aab
 8002a84:	08002abb 	.word	0x08002abb
 8002a88:	08002abb 	.word	0x08002abb
 8002a8c:	08002abb 	.word	0x08002abb
 8002a90:	08002ab3 	.word	0x08002ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a94:	f7ff f856 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 8002a98:	61f8      	str	r0, [r7, #28]
        break;
 8002a9a:	e014      	b.n	8002ac6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a9c:	f7ff f868 	bl	8001b70 <HAL_RCC_GetPCLK2Freq>
 8002aa0:	61f8      	str	r0, [r7, #28]
        break;
 8002aa2:	e010      	b.n	8002ac6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002aa4:	4b4d      	ldr	r3, [pc, #308]	; (8002bdc <UART_SetConfig+0x56c>)
 8002aa6:	61fb      	str	r3, [r7, #28]
        break;
 8002aa8:	e00d      	b.n	8002ac6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aaa:	f7fe ffb3 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 8002aae:	61f8      	str	r0, [r7, #28]
        break;
 8002ab0:	e009      	b.n	8002ac6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ab6:	61fb      	str	r3, [r7, #28]
        break;
 8002ab8:	e005      	b.n	8002ac6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002ac4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d077      	beq.n	8002bbc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005a      	lsls	r2, r3, #1
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	441a      	add	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	2b0f      	cmp	r3, #15
 8002ae6:	d916      	bls.n	8002b16 <UART_SetConfig+0x4a6>
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aee:	d212      	bcs.n	8002b16 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f023 030f 	bic.w	r3, r3, #15
 8002af8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	085b      	lsrs	r3, r3, #1
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	8afb      	ldrh	r3, [r7, #22]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	8afa      	ldrh	r2, [r7, #22]
 8002b12:	60da      	str	r2, [r3, #12]
 8002b14:	e052      	b.n	8002bbc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002b1c:	e04e      	b.n	8002bbc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d827      	bhi.n	8002b76 <UART_SetConfig+0x506>
 8002b26:	a201      	add	r2, pc, #4	; (adr r2, 8002b2c <UART_SetConfig+0x4bc>)
 8002b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2c:	08002b51 	.word	0x08002b51
 8002b30:	08002b59 	.word	0x08002b59
 8002b34:	08002b61 	.word	0x08002b61
 8002b38:	08002b77 	.word	0x08002b77
 8002b3c:	08002b67 	.word	0x08002b67
 8002b40:	08002b77 	.word	0x08002b77
 8002b44:	08002b77 	.word	0x08002b77
 8002b48:	08002b77 	.word	0x08002b77
 8002b4c:	08002b6f 	.word	0x08002b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b50:	f7fe fff8 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 8002b54:	61f8      	str	r0, [r7, #28]
        break;
 8002b56:	e014      	b.n	8002b82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b58:	f7ff f80a 	bl	8001b70 <HAL_RCC_GetPCLK2Freq>
 8002b5c:	61f8      	str	r0, [r7, #28]
        break;
 8002b5e:	e010      	b.n	8002b82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b60:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <UART_SetConfig+0x56c>)
 8002b62:	61fb      	str	r3, [r7, #28]
        break;
 8002b64:	e00d      	b.n	8002b82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b66:	f7fe ff55 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 8002b6a:	61f8      	str	r0, [r7, #28]
        break;
 8002b6c:	e009      	b.n	8002b82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b72:	61fb      	str	r3, [r7, #28]
        break;
 8002b74:	e005      	b.n	8002b82 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002b80:	bf00      	nop
    }

    if (pclk != 0U)
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d019      	beq.n	8002bbc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	085a      	lsrs	r2, r3, #1
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	441a      	add	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	2b0f      	cmp	r3, #15
 8002ba0:	d909      	bls.n	8002bb6 <UART_SetConfig+0x546>
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba8:	d205      	bcs.n	8002bb6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60da      	str	r2, [r3, #12]
 8002bb4:	e002      	b.n	8002bbc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002bc8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3728      	adds	r7, #40	; 0x28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40008000 	.word	0x40008000
 8002bdc:	00f42400 	.word	0x00f42400

08002be0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d01a      	beq.n	8002cf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cde:	d10a      	bne.n	8002cf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	605a      	str	r2, [r3, #4]
  }
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b098      	sub	sp, #96	; 0x60
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d34:	f7fd fe48 	bl	80009c8 <HAL_GetTick>
 8002d38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d12e      	bne.n	8002da6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d50:	2200      	movs	r2, #0
 8002d52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f88c 	bl	8002e74 <UART_WaitOnFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d021      	beq.n	8002da6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6a:	e853 3f00 	ldrex	r3, [r3]
 8002d6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d76:	653b      	str	r3, [r7, #80]	; 0x50
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d80:	647b      	str	r3, [r7, #68]	; 0x44
 8002d82:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d88:	e841 2300 	strex	r3, r2, [r1]
 8002d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1e6      	bne.n	8002d62 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e062      	b.n	8002e6c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d149      	bne.n	8002e48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002db4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f856 	bl	8002e74 <UART_WaitOnFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d03c      	beq.n	8002e48 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	e853 3f00 	ldrex	r3, [r3]
 8002dda:	623b      	str	r3, [r7, #32]
   return(result);
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dec:	633b      	str	r3, [r7, #48]	; 0x30
 8002dee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df4:	e841 2300 	strex	r3, r2, [r1]
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1e6      	bne.n	8002dce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3308      	adds	r3, #8
 8002e06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	e853 3f00 	ldrex	r3, [r3]
 8002e0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0301 	bic.w	r3, r3, #1
 8002e16:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3308      	adds	r3, #8
 8002e1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e20:	61fa      	str	r2, [r7, #28]
 8002e22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e24:	69b9      	ldr	r1, [r7, #24]
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	e841 2300 	strex	r3, r2, [r1]
 8002e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e5      	bne.n	8002e00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e011      	b.n	8002e6c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3758      	adds	r7, #88	; 0x58
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	4613      	mov	r3, r2
 8002e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e84:	e049      	b.n	8002f1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d045      	beq.n	8002f1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7fd fd9b 	bl	80009c8 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e048      	b.n	8002f3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d031      	beq.n	8002f1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d110      	bne.n	8002ee6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2208      	movs	r2, #8
 8002eca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f838 	bl	8002f42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2208      	movs	r2, #8
 8002ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e029      	b.n	8002f3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ef4:	d111      	bne.n	8002f1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002efe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f81e 	bl	8002f42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e00f      	b.n	8002f3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	69da      	ldr	r2, [r3, #28]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4013      	ands	r3, r2
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	bf0c      	ite	eq
 8002f2a:	2301      	moveq	r3, #1
 8002f2c:	2300      	movne	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d0a6      	beq.n	8002e86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b095      	sub	sp, #84	; 0x54
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f52:	e853 3f00 	ldrex	r3, [r3]
 8002f56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f68:	643b      	str	r3, [r7, #64]	; 0x40
 8002f6a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f70:	e841 2300 	strex	r3, r2, [r1]
 8002f74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e6      	bne.n	8002f4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3308      	adds	r3, #8
 8002f82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	e853 3f00 	ldrex	r3, [r3]
 8002f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3308      	adds	r3, #8
 8002f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fa4:	e841 2300 	strex	r3, r2, [r1]
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e5      	bne.n	8002f7c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d118      	bne.n	8002fea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	e853 3f00 	ldrex	r3, [r3]
 8002fc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f023 0310 	bic.w	r3, r3, #16
 8002fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fd6:	61bb      	str	r3, [r7, #24]
 8002fd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fda:	6979      	ldr	r1, [r7, #20]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	e841 2300 	strex	r3, r2, [r1]
 8002fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1e6      	bne.n	8002fb8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002ffe:	bf00      	nop
 8003000:	3754      	adds	r7, #84	; 0x54
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <memset>:
 800300a:	4402      	add	r2, r0
 800300c:	4603      	mov	r3, r0
 800300e:	4293      	cmp	r3, r2
 8003010:	d100      	bne.n	8003014 <memset+0xa>
 8003012:	4770      	bx	lr
 8003014:	f803 1b01 	strb.w	r1, [r3], #1
 8003018:	e7f9      	b.n	800300e <memset+0x4>
	...

0800301c <__libc_init_array>:
 800301c:	b570      	push	{r4, r5, r6, lr}
 800301e:	4d0d      	ldr	r5, [pc, #52]	; (8003054 <__libc_init_array+0x38>)
 8003020:	4c0d      	ldr	r4, [pc, #52]	; (8003058 <__libc_init_array+0x3c>)
 8003022:	1b64      	subs	r4, r4, r5
 8003024:	10a4      	asrs	r4, r4, #2
 8003026:	2600      	movs	r6, #0
 8003028:	42a6      	cmp	r6, r4
 800302a:	d109      	bne.n	8003040 <__libc_init_array+0x24>
 800302c:	4d0b      	ldr	r5, [pc, #44]	; (800305c <__libc_init_array+0x40>)
 800302e:	4c0c      	ldr	r4, [pc, #48]	; (8003060 <__libc_init_array+0x44>)
 8003030:	f000 f818 	bl	8003064 <_init>
 8003034:	1b64      	subs	r4, r4, r5
 8003036:	10a4      	asrs	r4, r4, #2
 8003038:	2600      	movs	r6, #0
 800303a:	42a6      	cmp	r6, r4
 800303c:	d105      	bne.n	800304a <__libc_init_array+0x2e>
 800303e:	bd70      	pop	{r4, r5, r6, pc}
 8003040:	f855 3b04 	ldr.w	r3, [r5], #4
 8003044:	4798      	blx	r3
 8003046:	3601      	adds	r6, #1
 8003048:	e7ee      	b.n	8003028 <__libc_init_array+0xc>
 800304a:	f855 3b04 	ldr.w	r3, [r5], #4
 800304e:	4798      	blx	r3
 8003050:	3601      	adds	r6, #1
 8003052:	e7f2      	b.n	800303a <__libc_init_array+0x1e>
 8003054:	080030cc 	.word	0x080030cc
 8003058:	080030cc 	.word	0x080030cc
 800305c:	080030cc 	.word	0x080030cc
 8003060:	080030d0 	.word	0x080030d0

08003064 <_init>:
 8003064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003066:	bf00      	nop
 8003068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306a:	bc08      	pop	{r3}
 800306c:	469e      	mov	lr, r3
 800306e:	4770      	bx	lr

08003070 <_fini>:
 8003070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003072:	bf00      	nop
 8003074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003076:	bc08      	pop	{r3}
 8003078:	469e      	mov	lr, r3
 800307a:	4770      	bx	lr
